dart 문법정리

main() {
  // 여기서 부터 시작합니다.
  print("Hello Dart");
  
}

변수
    var : 처음 담긴 값으로 타입이 지정됩니다.
    String : 문자만 담을 수 있습니다.
    String? : 문자 또는 비어있는(null) 상태일 수 있습니다.
    final String : 문자를 한 번 담은 뒤 재할당 불가능합니다.

자료형
1. String
2. int/double
3. bool
4. list<String>
5. Map<K,V>
6. dynamic

  // 뭐든지 담을 수 있는 배열 생성
  print('-------- dynamic --------');
  List<dynamic> buckets = [1, "문자", [1, 2]]; // dynamic은 모든 타입을 포괄합니다.
  print(buckets);
  buckets.add(true); // 아무거나 담을 수 있음
  print(buckets);
  print(buckets[2]); // 2번째 배열 조회
  print(buckets[2][0]); // 2번째 배열의 0번째 값 조회

  Map<String, dynamic> person = {
    "name": "철수",
    "age": 20
  };

조건문
    if (bool1) {
        // bool1이 true면 실행
    } else {
        // bool1이 false면 실행
    }

    ## else if 구문
    if (bool1) {
        // bool1이 true면 실행
    } else if (bool2) {
        // bool1이 false이고, bool2가 true이면 실행
    } else if (bool3) {
        // bool1과 bool2가 false이고, bool3가 true이면 실행
    } else {
        // bool1, bool2, bool3가 모두 false이면 실행
    }

비교연산자
    && 
    ||

반복문
    for (int i = 0; i < 5; i++) {
        print('hello ${i + 1}');
    }

## $의 사용법: 문자열 내에서 문자가 아니라 변수로 인식

함수
void say() {
    print("안녕")
    print("Hello")
}

함수의 출력
String getName() {
    return "철수";
}
String getName() ==> "철수";

클래스
class Bread {

	// 생성자
	Bread() {
	}

}

class Bread {
	String? content;

	// 생성자 호출시 core를 전달 받습니다.
	Bread(String core) {
		content = core; // 전달 받은 core를 content에 넣어줍니다.
	}
}