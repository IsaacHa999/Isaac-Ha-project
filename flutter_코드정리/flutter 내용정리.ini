flutter 내용정리 : 화면을 그리는데 필요한 기능!!

기본세팅
1. analysis_options~ 세팅
2. assets 이미지 가져오기 세팅
  flutter:
  uses-material-design: true
  assets:     # 새로 추가한 부분
    - assets/ # assets 폴더의 모든 이미지를 불러옴

Dart: Use Recommended Settings

기본위젯: Text, Container, Icon, Image, Button(엘리베이트, 텍스트, 아이콘)
레이아웃 위젯: Scaffold, Column, Row, Stack, SingleChildScrollView

Text(
  '텍스트 위젯',
  style: TextStyle(
    fontSize: 35, // 폰트 크기
    fontWeight: FontWeight.bold, // 폰트 두께
    color: Colors.amber, // 폰트 색상
  ),
),

Container(
  width: 200, // 폭  #double.infinity
  height: 200, // 높이
  color: Colors.amber, // 박스 색상
  child: Text("I Love Flutter!"), // 자식 위젯
),

Button
    // 위로 올라와 있는 듯한 버튼
    ElevatedButton(
    onPressed: () {},
    child: Text('Elevated Button'),
    ),

    // 텍스트 버튼
    TextButton(
    onPressed: () {},
    child: Text('Text Button'),
    ),

    // 아이콘 버튼
    IconButton(
    onPressed: () {},
    icon: Icon(Icons.add),
    ),

아이콘(Material Icon or Cupertino Icon)

  <Material Icon>
  import 'package:flutter/material.dart';

  Icon(
    Icons.home,   #아이콘 이름!!! https://fonts.google.com/icons?selected=Material+Icons
    color: Colors.blue,
    size: 50,
  ),

  <Cupertino Icon>
  import 'package:flutter/cupertino.dart';

  Icon(
    CupertinoIcons.house,
    color: Colors.pink,
    size: 50,
  ),

Image
  home: Scaffold(
    body: Center(
      child: Image.network(
        'https://i.ibb.co/CwzHq4z/trans-logo-512.png',
        width: 150,
      ),
    ),
  ),

Scaffold(
	appBar: 다른 위젯, // 상단 바  # AppBar()
	body: 다른 위젯, //화면 중앙에 가장 큰 면적 #안에 컨테이너 넣을 수!
	bottomNavigationBar: 다른 위젯, //하단 바 # BottomNavigationBar() #양식 참조
	floatingActionButton: 다른 위젯, //우측 하단 #FloatingActionButtion()
),

				bottomNavigationBar: BottomNavigationBar(
          items: const <BottomNavigationBarItem>[ # 리스트 형태로
            BottomNavigationBarItem(
              icon: Icon(Icons.alarm), #알람아이콘
              label: 'Alarm',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.nightlight_round), #아이콘
              label: 'Sleep',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.settings),
              label: 'Setting',
            ),
          ],
          currentIndex: 0, // 현재 선택된 메뉴
          selectedItemColor: Colors.amber,
        ),
#플로팅 아이콘	
				floatingActionButton: FloatingActionButton(
          onPressed: () {
            print("클릭 되었습니다!");
          },
          child: const Icon(
            Icons.add, #"+"아이콘
            color: Colors.amber,
          ),
          backgroundColor: Colors.white,
        ),

Column(
  children: [ // 자식 위젯들  # 반드시 children 사용!!
    Text("위젯1"),
    Text("위젯2"),
  ],
),

Row(
  children: [ // 자식 위젯들
    Text("위젯1"),
    Text("위젯2"),
  ],
),

정렬
# mainAxisSize
# mainAxisAlignment
# crossAxisAlignment

SingleChildScrollView(
  child: Container(height: 10000), // 자식 위젯
),


padding #column 비슷하게 child를 가진다.
    EdgeInsets.all(8)

    EdgeInsets.only(
    left: 8,
    right: 8,
    )

    EdgeInsets.symmetric(
        vertical: 8,
        horizontal: 8,
    )



StatelessWidget 기본 구조

import 'package:flutter/material.dart'; // Material 위젯 가져오기

void main() {
  print("1. 시작");
  runApp(const MyApp()); // MyApp 위젯으로 Flutter 시작!
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);     # 생성자

  @override
  Widget build(BuildContext context) {  # 빌드함수는 위젯을 반환한다.
    print("2. build 호출 됨");
    
    // 화면에 보여지는 영역
    return const MaterialApp(     #리턴되는 위젯
      home: Scaffold(
        body: Center(
          child: Text(
            "hello Stateless Widget",
            style: TextStyle(fontSize: 35),
          ),
        ),
      ),
    );
  }
}
# 화면에 첫 번째 위젯은 일반적으로 MaterialApp or CupertinoApp 위젯으로 시작합니다.

<statefullWidget 기본구조>


import 'package:flutter/material.dart'; // Material 위젯 가져오기

void main() {
  print("1. 시작");
  runApp(const MyApp()); // MyApp 위젯으로 Flutter 시작!
}

// StatefulWidget의 기능을 물려받음
class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

// MyApp의 상태를 나타내는 클래스       ## 차이점: 상태를 나타내는 클래스를 가지고 있다.
class _MyAppState extends State<MyApp> {
  int number = 1; // number가 1인 상태

  @override
  Widget build(BuildContext context) {
    print("2. build 호출 됨");

    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Text("$number", style: TextStyle(fontSize: 35)),
        ),
        floatingActionButton: FloatingActionButton(
          child: Icon(Icons.add),
          onPressed: () {
            print("3. 클릭 됨");

            // setState : build 메소드를 다시 호출해서 화면 갱신!         ## 매우중요: 화면을 갱신한다!!!!!
            setState(() {
              number += 1; // number를 1만큼 증가
            });
          },
        ),
      ),
    );
  }
}


기타: 2텍스트 입력 받기, 3클릭 이벤트 받기, 4화면이동

TextField(
  autofocus: true, // 자동 포커스
  onChanged: (text) {
    // 텍스트 변경시 실행되는 함수
  },
  onSubmitted: (text) {
    // Enter를 누를 때 실행되는 함수
  },
),

다음 페이지로 이동하기
Navigator.push(
  context,
  MaterialPageRoute(builder: (context) => SecondPage()), // 이동하려는 페이지
);

현재 화면 종료
Navigator.pop(context); // 종료





인스타그램 만들기
appbar 구성 : leading 영역, title영역, action 영역
사진불러오기: assets 폴더 만들고 pubspec.yaml 파일에 규칙추가하기
    flutter:
      uses-material-design: true
      assets:     # 새로 추가한 부분
        - assets/ # assets 폴더의 모든 이미지를 불러옴
가운데, 왼쪽 정렬하기 
crossAxisAlignment: CrossAxisAlignment.start
파일 분리하기!!
Feed() 위젯 분리하기 


statefullWidget 으로 바꾸고, 좋아요 기능 구현하기
  bool isFavorite = false;
  IconButton(
    icon: Icon(
      CupertinoIcons.heart,
      color: isFavorite ? Colors.pink : Colors.black,
    ),
    onPressed: () {
      setState(() {     //build가 다시 호출된다.
        isFavorite = !isFavorite;
      });
    },
    ),

  리스트뷰의 사용법 : 같은 형식의 피드가 반복될 때
    ListView(
    children: [
      Text("0"),
      Text("1"),
      Text("2"),
      ...
    ]
  );
<리스트뷰 반복하는 법> for문과 비슷하다!!!!
  ListView.builder(
  itemCount: 100, // 전체 아이템 개수
  itemBuilder: (context, index) { // index는 0 부터 99까지 증가
		return Text("$index"); // 100번 실행
  }
),




구글링 자료
sizedbox : 
1) Row나 Column과 같은 위젯의 children들 사이에 간격을 두고 싶을때 공백을 두기 위해서 사용함.
2) Container, button과 같은 다른 위젯을 child로 두면서 높이와 너비를 고정시키고 싶을때 사용함.
Spacer()

safearea : 각 기기별 사이즈 고려
CircleAvatar(
  radius: 250,
  background: AssetImage("assetName")
)
ClipOval() : 클래스 만들어서 하는데 잘 조작이 안됨.....


클릭시 함수 실행하는 방법
GestureDetector(이미지 클릭시 함수 실행)
Button(다양한 버튼이 있다.)

Scaffold, SafeArea, Center, Row, GestureDetector, CircleAvatar, ClipOval, Image.network, SizedBox, 