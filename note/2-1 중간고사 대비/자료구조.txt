Chapter 0: 기타
    System.arraycopy(elements, 0, data, manyItems, elements.length); 
        

Chapter 1: 소프트웨어 개발의 단계
    데이터구조: Linear(Array Linked LIst Stack Queue) Non Linear(Tree Graph)
    소프트웨어 개발의 단계
        ~

    용어 정의: 
        Specificaion: 문제에 대한 정확한 기술
        Design(알고리즘 설계), 
        Implementation: code it

    Precondition & Postcondition & invariant
        Precondition: is a statement the condition that is supposedto be true when a method is called: 메서드가 호출되기 위해 지켜져야 할 조건
        Postcondition: 메서드가 호출된 후 만족할 조건
        invariant: invariant는 데이터 타입을 정의할 때 반드시 지켜야하는 조건으로써 domain field data를 사용하는 방법을 명세하는 것이다.
    Specificaion 만드는 법
        목적 > 방법
        introduction
        parameter
        Precondition
        Returns condition or postcondition
        throws 
        
    Exception
        예외 던지기
        throw new IllegalArgumentException("메세지");

        대표적인 예외 암기
            IllegalArgumentException
            NullPointerException
            

    알고리즘 속도: Big-O Notation
        1. O(1) : 스택에서 Push, Pop
        2. O(log n) : 이진트리  절반 or 일정량 덜어내는 방식
        3. O(n) : for 문    1+2+3+4+5+.....n = 
        4. O(n log n) : 퀵 정렬(quick sort), 병합정렬(merge sort), 힙 정렬(heap Sort)
        5. O(n^2) : 이중 for 문, 삽입정렬(insertion sort), 거품정렬(bubble sort), 선택정렬(selection sort)
        6. O(2^n) : 피보나치 수열
        1+2+3+4+    +n = O(n)   //연산의 숫자!
    테스팅과 디버깅
        assert X : "message";       //true가 아니면 메세지 출력

Chapter 2: Java Class & Impormation Hiding
    Encapsulation
    @Throttle Class

    접근지정자: private, default, protected, public

    constructor: 생성자, 
        초기화 한다.
        rules

    Accessor Methods, Modification Methods
        Accessor Methods: no parameter, no precondition/ 정보를 return하고 데이터 변경이 없다     // public double getFlow(){}
        Modification Methods: change the status of an object/ return이 없고 객체의 정보 변경이 있다    // publicvoid shoutoff(){ position = 0};

    copy: pass by value / pass by reference

    a1.equals(a2) vs ==

    clone은 타입 캐스팅 필수!!
        Location s = p.clone(); //컴파일 에러
        Location s = (LOcation) p.clone();  //ok

Chapter 3: Array
    ADT:
        invariant: 
    IntArrayBag
        필드
        data[]
        manyItems: 개수, 다음 데이터 인덱스를 의미

        생성자
            IntArrayBag()
            IntArrayBag(int initialCapacity)
        메서드 
            add(int element)
            addMany(int... elements)
            addAll(IntArrayBag addend)
            clone()
            countOccurrences(int target)
            ensureCapacity(int minimumCapacity)
            getCapacity()
            remove(int target)
            size()
            trimToSize()
            union(IntArrayBag b1, IntArrayBag b2)

    OutofMemoryError


Chapter 4: Linked LIst
    Node의 구조
        head -> next -> next -> next -> tail
                  -> next ->
    head를 사용하는 이유: 시작 노드를 참조할 수 있다!, 하나의 IntNode가 아니다, 참조변수다!
        생성자에서 head 생성(null 객체를 만들고 주소 반환)
        IntNode head;
        head = new IntNode(42,null);    //처음에 null로 잡은 것이 끝까지 이동한다.

    IntNode 
        필드
            int data;
            IntNode link;
        생성자
            IntNode(int, IntNode)
        메서드
            addNodeAfter(int item) { link = new IntNode(item,link); }//뒤의 link 값은 어자피 의미 없기 때문에 전의 link값을 그대로 가져오는 경우 많다(null)
            getData()
            getLink()

            static listCopy(IntNode source) {
                IntNode copyHead;
                IntNode copyTail;
                copyHead = new IntNode(source.data, null);
                copyTail = copyHead;
                while (source.link != null)
                {
                    source = source.link;
                    copyTail.addNodeAfter(source.data);
                    copyTail = copyTail.link;
                }
                return copyHead;
            }

            static listCopyWithTail(IntCode source)
            static listLength(IntNode head)
            static listPart(IntNode start, IntNode end)     //부분카피
            static listPosition(IntNode head, int position)
            static listSearch(IntNode head, int target)
            setData(int newData)
            setLink(IntNode newLink)

        head = new IntNode(12, head) 와 // 맨 앞에 추가
        head = new IntNode(12, null) 비교
        head = head.getLink();  link = link.link;   // remove
        
        Dummy Nodes


Chapter 5: Stack
    LIFO

    infix --> postfix
    연산자 우선 순위와 LR을 고려하여 바로 구하는 것이 가장 빠르다
    스택을 이용하여 푸는 경우
        왼쪽부터 순서대로
        숫자,문자 ---> output
        연산자, 괄호 --> stack
        연산자 우선 순위 : +- > */ 
        우선 순위가 낮은 것이 stack에서 pop 된다. 
            같은 경우도 먼저 pop 된다
            우선 순위가 낮은 것이 들어오면 stack에 쌓인다.!
    Intstack
        필드
            int[] data
            int manyItems
        생성자
        메서드  
            peek() {return data[manyItems-1]}
            pop() { data[--manyItems]}
            push(int item) {data[manyItems] = item; manyItems++}

Chapter 6: Queue
    FIFO

    Enqueue
    Dequeue
    front
    rear

    배열은 비 효율적 --> 원형 배열 큐( rear = (rear +1) % CAPACITY)

    원형 배열큐:  IntQueue
    
        public void ensureCapacity(int minimumCapacity)
        {
            int biggerArray[ ];
            int n1, n2;
            
            if (data.length >= minimumCapacity)
                // No change needed.
                return;
            else if (manyItems == 0)
                // Just increase the size of the array because the queue is empty.
                data = new int[minimumCapacity];
            else if (front <= rear)
            {  // Create larger array and copy data[front]...data[rear] into it.
                biggerArray = new int[minimumCapacity];
                System.arraycopy(data, front, biggerArray, front, manyItems);
                data = biggerArray;
            }
            else
            {  
                biggerArray = new int[minimumCapacity];
                n1 = data.length - front;
                n2 = rear + 1;
                System.arraycopy(data, front, biggerArray, 0, n1);
                System.arraycopy(data, 0, biggerArray, n1, n2);
                front = 0;
                rear = manyItems-1;  
                data = biggerArray;
            }
        }

        암기 목록
        r = (r+1) % CAPACITY
        n2 = rear + 1
        n1 = CAPACITY - front

    연결리스트 큐:   
        Enqueue
            rear.addNodeAfter(item);
            rear = rear.getLink( );  
        Dequeue
            front = front.link;
    우선순위 큐
        그림 암기!!

Chapter 7: Recrusion
    종료 조건을 생각하자!(stopingcase = base case)

    팩토리얼
    int factorial (int n)
    {
        if (n <=1)
            return 1;
        else 
            return n* factorial(n-1)
    }

    랜덤 프렉탈



기출
big O

예외처리 암기 IllegalArgumentException

constructor modifier accerssor 구분

location a b 좌표 구하는 문제

= 과 clone 메서드 차이점

배열의 모습 그리기

linkedlist 그리기

Queue에서 Enqueue Dequeue 구현하기

array linkedlist 장단점

프리픽스, 포스틑픽스로 바꾸기

원형 배열에서 다음 갓ㅂ을 구할 때 쓰는공식: rear = (rear + 1) % CAPACITY