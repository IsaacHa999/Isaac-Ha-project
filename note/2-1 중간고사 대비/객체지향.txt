0장 주의사항
    2차원 배열의 선언에서
    int[] a = {10, 100};
    test[0] = {10,100}; 안 된다. 
    test[0] = a;        가능!       이유?? type 지정이 안되서

    식(expression) 이란 무엇인가?
    하나의 값으로 평가됩니다. 
    식은 변수, 상수, 리터럴, 연산자, 메소드 호출 등의 조합으로 이루어질 수 있습니다. 
    자바에서의 식은 문장(statements)과 구별되며, 문장은 프로그램의 실행 단위를 구성합니다. 
    식은 값을 계산하고 반환하므로 항상 값을 가지며, 문장은 어떤 작업을 수행하고 실행 결과가 있을 수도 있습니다. 
    자바에서는 식을 사용하여 값을 계산하고 반환하는 것뿐만 아니라, 제어문, 람다 표현식, 메소드 참조 등 다양한 곳에서 사용될 수 있습니다.


1장 자바 시작
    .java & .class 링킹x
    WORA
    javac과 java: 컴파일러와 실행기
        javac HellowWorld.java
        java HelloWorld
    자바의 특성: 4가지??
    소스 파일과 클래스 파일의 관계: 클래스 파일의 개수
    main의 개수: 한 클래스 마다 한 개!

2장 자바 기본 프로그래밍
    식별자와 키워드: _ $
    원시타입(8개)와 레퍼런스 타입(3가지); 문자열은 원시 타입이 아님!
    원시타입의 크기: 2개 정수4개 실수 2개
    리터럴: 고정된 값을 직접 코드에 기술; 정수, 실수, 문자, 논리, 문자열 리터럴이 있다. //문자열 주의
            기본 타입 이외의 리터럴: null 리터럴, 문자열 리터럴
            String st = "isaac";
            String st = new String("isaac"); 복사의 형태가 다르다? ---> 같던데 , 실험해보니까 둘 다 객체ㅐㅇ섵xfkrh todrkr
     
    var 키워드 오류 case: var name; //컴파일 오류 
    final 키워드: final daoubel PI;     PI = 3.14; //final은 한 번만 값을 할당할 수 있다.!

    자동타입변환: 작은 타입이 큰 타입으로 갈 때 자동으로 인정!
        원시타입 자동형변환 참고
        1. boolean 제외
        2. byte - >short -> int -> long -> float -> double
                    char
        3. 정수 승격
    캐스팅: 큰 타입이 작은타입으로 갈 때 
        16진수가 잘리는 경우
        (byte)로 잘리는 경우

    기타 형변환
        Integer.parseInt(123)



    Scanner 클래스!!
        java.util.Scanner
        Scanner a = new Scanner(System.in);
        기본적으로 문자열!
        scanner.next();
        scanner.nextInt();
        scanner.nextDouble();
        scanner.nextBoolean();
        주요 메서드

    식과 연산자
        식이란 무엇인가
        연산자 우선순위
        조건연산자(3항연산자) 
        
    if문 조건문
    switch(식)  
        case 값1:       //값 부분에 (문자, 정수, 문자열 리터럴)만 올 수 있다. --> 실수, boolean 불가능!!
                        // 값 부분에 1-1가능!(변수만 아니면 됨)

3장: 반복문과 배열 그리고 예외 처리
    반복문
        for
        while
        do while
        for each: 주로 배열 읽기 전용
        
        continue
        break

    배열
        레퍼런스 변수와 배열
        배열의 선언
        오류: 반드시 배열 생성 후 접근!!    ///배열의 선언과 배열의 생성(new)은 다르다!!!
        배열의 공유(복사)
        length 필드

        2차원 배열: 예제 코드 반드시 암기
    
    예외처리
        컴파일 오류 
        런타임 에러
            예외 처리: try{} - catch(예외클래스 e){}- finally{}
        자주 발생하는 예외 암기!!
            ArithmeticException: 정수를 0으로 나눌 때
            NullPointerException: null 레퍼런스를 참조할 때
            ClassCastException: 캐스트 예외
            OutOfMemoryError: 
            IOException: 
            NumberFormatException: 문자열 != 숫자 
            InputMismatchException: Scanner에서 타입 불일치!!
        에러 일으키기
            throw new IllegalArgumentException("print 문자열");
4장 클래스와 객체
    객체지향 특징: 캡슐화, 상속, 다형성(오버로딩, 오버라이딩) 기타...
    클래스의 구성: 
        접근 권한(2), 클래스 선언, 클래스 이름, 상속 
        필드/static 필드
        생성자
        메서드/static 메서드
        
        하나의 클래스 마다 main을 가질 수 있다. ///왜냐하면 클래스의 객체를 생성해도 모든 메서드가 실행되는 것은 아니기 때문이다.
    겍체, 객체에 대한 개념: 반드시 new 키워드를 이용하여 생성자, 변수명은 stack에 객체는 heap에 공간 할당
    객체의 생성:
        1. 반드시 new를 통해 생성된다. 그림으로 Stack과 Heap static 영역에 대한 이해가 있어야 한다.
            A a = new A()에서 new A()가 먼저 실행되고 그 주소가 a에 할당 된다.
        2. 객체의 필드와 지역변수를 구분 할 수 있어야 한다.

    필드: 접근제어자 인스턴스/static
    생성자:
        기본 생성자: 클래스의 접근제어자와 동일하게 자동 생성
        생성자 조건: 
            생성자는 객체당 한 번 호출된다.
            생성자는 리턴 타입을 지정할 수 없다. //void도 마찬가지 --> 생성자가 아니라 동명의 메서드가 되어버린다!
        오버로딩
        this 레퍼런스 필요한 이유: 이름이 겹치는 경우
        this() 생성자
            클래스 내의 다른 생성자 호출
            생성자 내에서만 사용 가능
            반드시 생성자 코드의 제일 처음에 수행
    객체 배열 생성 및 사용: c = new Circle[5];
        for each문: for (int i; arr) {} 모든 요소에 접근
    메서드의 인자 전달: 원시 타입의 값 전달, 객체 혹은 배열 전달
    메서드 오버로딩

    가비지 컬렉션
    접근 지정자
        private
        디폴트
        protected
        publlic
    패키지
    static
        클래서가 첫 로딩이 될 때 static 공간이 잡힌다.
        멤버에만 붙인다.(지역변수는x)
        객체의 맴버로 접근하는 사례(권장x)
        클래스 이름으로 접근하는 사례
        제약조건1,2: this. 사용불가
    final
        
5장: 상속
    super의 사용
        1. super(필드1, 필드2): 생성자 호출
        2. super.   : 멤버 호출(필드,메서드)